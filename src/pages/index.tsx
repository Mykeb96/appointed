import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { SignIn, SignOutButton, useUser } from "@clerk/nextjs";
import { SignInButton } from "@clerk/nextjs";
import { useState } from 'react'
import { toast } from 'react-hot-toast'
import { api } from "~/utils/api";
import { useRouter } from "next/router";

const Home: NextPage = () => {

  const user = useUser();
  const ctx = api.useContext()
  const router = useRouter()

  const initialInput = {
    name: '',
    phone: '',
    email: '',
    notes: ''
  }

  const initialErrors = {
    name: '',
    phone: '',
    email: '',
    notes: ''
  }

  const newErrors = {
    name: '',
    phone: '',
    email: '',
    notes: ''
  }

  const [input, setInput] = useState(initialInput)
  const [errors, setErrors] = useState(initialErrors)

  const { mutate, isLoading: isAddingUser } = api.clients.create.useMutation({
    onSuccess: () => {
      setInput(initialInput)
      setErrors(initialErrors)
      void ctx.clients.getAll.invalidate()
      toast.success("Successfully added new client!")
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors
      if (e.data?.zodError?.fieldErrors.name && e.data?.zodError?.fieldErrors.name[0]){
        newErrors.name = 'Name must contain at least 2 character(s)'
      } else{
        newErrors.name = ''
      }
      if (e.data?.zodError?.fieldErrors.phone && e.data?.zodError?.fieldErrors.phone[0]){
        newErrors.phone = 'Phone # must contain exactly 10 character(s)'
      } else{
        newErrors.phone = ''
      }
      if (e.data?.zodError?.fieldErrors.email && e.data?.zodError?.fieldErrors.email[0]){
        newErrors.email = e.data?.zodError?.fieldErrors.email[0]
      } else{
        newErrors.email = ''
      }
      setErrors(newErrors)
      toast.error("Failed to add client")
    }
  })

  const { mutate: deleteMutate } = api.clients.delete.useMutation({
    onSuccess: () => {
      void ctx.clients.getAll.invalidate()
      toast.success("Successfully deleted client!")
    }
  })

  const { data, isLoading } = api.clients.getAll.useQuery();

  if (isLoading) return <div>Loading...</div>

  if (!data) return <div>Something went wrong</div>

  return (
    <>
      <Head>
        <title>Get Appointed</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      {!user.isSignedIn ? <div className={styles.authButton}><SignInButton /></div> : <div className={styles.authButton}><SignOutButton /></div>}
        <div style={{width: '220px'}}>
          <h2 style={{textAlign: 'center'}}>Add new client</h2>
          <div style={{display: 'flex', flexDirection: 'column'}}>
            <label />Name:
            <input value={input.name} onChange={(e) => setInput({...input, name: e.target.value})}/>
            {errors.name ? <span style={{color: 'red', marginBottom: '10px'}}>{errors.name}</span> : <p></p>}
            <label />Phone:
            <input value={input.phone} onChange={(e) => setInput({...input, phone: e.target.value})} />
            {errors.phone ? <span style={{color: 'red', marginBottom: '10px'}}>{errors.phone}</span> : <p></p>}
            <label />Email:
            <input value={input.email} onChange={(e) => setInput({...input, email: e.target.value})} />
            {errors.email ? <span style={{color: 'red', marginBottom: '10px'}}>{errors.email}</span> : <p></p>}
            <label />Notes &#40;Optional&#41;:
            <textarea style={{resize: 'none'}} rows={10} value={input.notes} onChange={(e) => setInput({...input, notes: e.target.value})} />
            <button disabled={isAddingUser} style={{width: '50%', margin: '5px auto 0px auto'}} onClick={() => {
              const upperCaseName = `${input.name.charAt(0).toUpperCase()}${input.name.substring(1)}`
            mutate({ name: upperCaseName, 
              phone: input.phone, 
              email: input.email, 
              notes: input.notes})
          }}>Submit</button>
          </div>
        </div>
        <div style={{display: 'flex', flexDirection: 'column', marginLeft: '100px'}}>
          <h2 style={{textDecoration: 'underline dotted', marginTop: '55px', textAlign: 'center'}}>Clients</h2>

          <div style={{height: '500px', overflowY: 'scroll'}}>
            {data.map(({client, clientOf}) => (<div style={{textAlign: 'center', display: 'flex', alignItems: 'center', height: '50px', paddingRight: '20px'}} key={client.id}>{client.name} client of: {clientOf?.username} {user?.user?.username == clientOf.username ? <p onClick={() => deleteMutate(client.id)} style={{marginLeft: '15px', color: 'red'}}>X</p> : null}</div>))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
